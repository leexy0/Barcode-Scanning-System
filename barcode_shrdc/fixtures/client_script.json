[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "modified": "2022-02-16 13:16:48.302398",
  "name": "Stock Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.stock_check);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.stock_check);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.stock_check);\n        if(frm.doc.docstatus===1 && frm.doc.stock_entry_type == \"Manufacture\") {\n\t\t\tfrm.add_custom_button(__(\"Barcode Printing\"), function() {\n            frappe.call({\n                method:'barcode_shrdc.barcode_shrdc.doctype.barcode_printing.barcode_printing.create_barcode_printing',\n                args:{ throw_if_missing: true, \n                    se_id: frm.doc.name,\n                    pr_id: null}\n                \n            })\n\t\t\t\t.then(r => {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\tlet new_bp_doc = r.message;\t// new barcode printing request\n\t\t\t\t\t\tfrappe.set_route(\"Form\", new_bp_doc.doctype, new_bp_doc.name);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},  __(\"Create\"));\n\t\t\tfrm.page.set_inner_btn_group_as_primary(__('Create'));\n\n\t\t}\n\t},\n\tonload(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.stock_check);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.stock_check);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.stock_check);\n\t},\n\tscan_barcode: function(frm){\n\t    let scan_barcode_field = frm.fields_dict[\"scan_barcode\"];\n\n\t\tlet show_description = function(idx, exist = null) {\n\t\t\tif (exist) {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Qty increased by 1', [idx]));\n\t\t\t} else {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Item added', [idx]));\n\t\t\t}\n\t\t};\n\n\t\tif(frm.doc.scan_barcode) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"erpnext.selling.page.point_of_sale.point_of_sale.search_serial_or_batch_or_barcode_number\",\n\t\t\t\targs: { search_value: frm.doc.scan_barcode }\n\t\t\t}).then(r => {\n\t\t\t\tconst data = r && r.message;\n\t\t\t\tif (!data || Object.keys(data).length === 0) {\n\t\t\t\t\tscan_barcode_field.set_new_description(__('Cannot find Item with this barcode'));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet cur_grid = frm.fields_dict.items.grid;\n\n\t\t\t\tlet row_to_modify = null;\n\t\t\t\tconst existing_item_row = frm.doc.items.find(d => d.item_code === data.item_code);\n\t\t\t\tconst blank_item_row = frm.doc.items.find(d => !d.item_code);\n\n\t\t\t\tif (existing_item_row) {\n\t\t\t\t\trow_to_modify = existing_item_row;\n\t\t\t\t} else if (blank_item_row) {\n\t\t\t\t\trow_to_modify = blank_item_row;\n\t\t\t\t}\n\t\t\t\tif (!row_to_modify) {\n\t\t\t\t\t// add new row\n\t\t\t\t\trow_to_modify = frappe.model.add_child(frm.doc, cur_grid.doctype, 'items');\n\t\t\t\t\tfrappe.msgprint({\n                    title: __('Alert'),\n                    indicator: 'orange',\n                    message: __('New Item is added')\n                    });\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t    if(data[\"batch_no\"]&& frappe.meta.has_field(row_to_modify.doctype, \"batch_no\")){\n\t\t\t\t        if(frm.doc.items.find(d => d.item_code === data.item_code))\n\t\t\t\t        {\n\t\t\t\t            if(!frm.doc.items.find(d => d.batch_no === data.batch_no)){\n    \t\t\t\t            row_to_modify = frappe.model.add_child(frm.doc, cur_grid.doctype, 'items');\n    \t\t\t\t        }\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\n\n\t\t\t\tshow_description(row_to_modify.idx, row_to_modify.item_code);\n\n\t\t\t\tfrm.from_barcode = true;\n\t\t\t\tfrappe.model.set_value(row_to_modify.doctype, row_to_modify.name, {\n\t\t\t\t\titem_code: data.item_code,\n\t\t\t\t\tchecking_qty: (frm.doc.stock_check)?(row_to_modify.checking_qty || 0) + 1 : row_to_modify.checking_qty,\n\t\t\t\t\tqty: (!frm.doc.stock_check)?(row_to_modify.qty || 0) + 1 : row_to_modify.qty\n\t\t\t\t});\n\n\t\t\t\t['serial_no', 'batch_no', 'barcode'].forEach(field => {\n\t\t\t\t\tif (data[field] && frappe.meta.has_field(row_to_modify.doctype, field)) {\n\n\t\t\t\t\t\tlet value = (row_to_modify[field] && field === \"serial_no\")\n\t\t\t\t\t\t\t? row_to_modify[field] + '\\n' + data[field] : data[field];\n\n\t\t\t\t\t\tfrappe.model.set_value(row_to_modify.doctype,\n\t\t\t\t\t\t\trow_to_modify.name, field, value);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tscan_barcode_field.set_value('');\n\t\t\t\trefresh_field(\"items\");\n\t\t\t});\n\t\t}\n\t},\n\tstock_check: function(frm)\n\t{\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.stock_check);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.stock_check);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.stock_check);\n        if (frm.doc.stock_entry_type == \"Receive at Warehouse\")\n        {\n            if(frm.doc.stock_check)\n            {\n                frm.doc.items.forEach(function(d){\n                    d.serial_no = \"\"\n                })\n            }\n            else\n            {\n                frappe.call({\n        \t\t\tdoc: frm.doc,\n        \t\t\tmethod: \"set_items_for_stock_in\",\n        \t\t\tcallback: function() {\n        \t\t\t\trefresh_field('items');\n        \t\t\t}\n        \t\t}); \n            }\n\n        }\n\t},\n\tbefore_submit: function(frm,cdt,cdn){\n\t\tconst item = locals[cdt][cdn];\n\t\tif(frm.doc.stock_check)\n\t\t{\n\t\t    frm.doc.items.forEach(function(d)\n            {\n    \t\t    if(d.qty !== d.checking_qty) \n    \t\t    {\n    \t\t        frappe.validated = false;\n                    frappe.msgprint({\n                    title: __('Warning'),\n                    indicator: 'red',\n                    message: __('Checking Qty and Required Qty of Items row {0} does not matched.',[d.idx])\n                    });\n    \t\t    }\n    \t\t    if (frm.doc.stock_entry_type==\"Receive at Warehouse\")\n    \t\t    {\n    \t\t        frappe.call({\n                \t\t\targs: {name:frm.doc.outgoing_stock_entry},\n                \t\t\tmethod: \"get_stock_entry\",\n                \t\t\tcallback: function(r) {\n                \t\t\t\tvar send_doc = r.message;\n            \t\t\t\t    var send_item = send_doc.items.find(send => send.item_code === d.item_code);\n                \t\t        var send_serials = send_item.serial_no.split(\"\\n\");\n                \t\t        var serials = d.serial_no.split(\"\\n\");\n                \t\t        if (serials[serials.length-1]=='')\n                \t\t        {\n                \t\t            serials.pop();\n                \t\t        }\n                \t\t        const containsAll = serials.every(element => {\n                                  return send_serials.includes(element);\n                                });\n\n                \t\t        if (!containsAll)\n                \t\t        {\n                                    frappe.validated = false;\n                                    frappe.msgprint({\n                                    title: __('Warning'),\n                                    indicator: 'red',\n                                    message: __('Serial No. of Items row {0} does not match with Stock Entry (Outward GIT) {1}.',[d.idx, frm.doc.outgoing_stock_entry])\n                                });\n                \t\t        }\n                \t\t\t}\n                \t\t}); \n    \t\t        \n    \t\t    }\n            });\n\t\t}\n\t},\n\tbefore_save(frm)\n\t{\n\t\tif(!frm.doc.stock_check)\n\t\t{\n    \t\tfrm.doc.items.forEach(function(d)\n                {\n                    frappe.model.set_value(d.doctype,d.name,'checking_qty',0);\n                }\n            );\n\t\t}\n\t},\n\tstock_entry_outward_git(frm){\n\t    frm.set_value(\"outgoing_stock_entry\",frm.doc.stock_entry_outward_git);\n\t},\n// \twork_order: function(frm) {\n// \t\tfrm.cscript.toggle_enable_bom();\n// \t\tif(!frm.doc.work_order || frm.doc.job_card) {\n// \t\t\treturn;\n// \t\t}\n//         var fg_completed_qty;\n// \t\treturn frappe.call({\n// \t\t\tmethod: \"get_work_order_details2\",\n// \t\t\targs: {\n// \t\t\t\twork_order: frm.doc.work_order,\n// \t\t\t\tcompany: frm.doc.company\n// \t\t\t},\n// \t\t\tcallback: function(r) {\n// \t\t\t\tif (!r.exc) {\n// \t\t\t\t\t$.each([\"from_bom\", \"bom_no\", \"fg_completed_qty\", \"use_multi_level_bom\"], function(i, field) {\n// \t\t\t\t\t\tfrm.set_value(field, r.message[field]);\n// \t\t\t\t\t});\n// \t\t\t        fg_completed_qty = r.message.fg_completed_qty;\n\n// \t\t\t\t\tif (frm.doc.purpose == \"Material Transfer for Manufacture\" && !frm.doc.to_warehouse)\n// \t\t\t\t\t\tfrm.set_value(\"to_warehouse\", r.message.wip_warehouse);\n\n\n// \t\t\t\t\tif (frm.doc.purpose == \"Manufacture\" || frm.doc.purpose == \"Material Consumption for Manufacture\" ) {\n// \t\t\t\t\t\tif (frm.doc.purpose == \"Manufacture\") {\n// \t\t\t\t\t\t\tif (!frm.doc.to_warehouse) frm.set_value(\"to_warehouse\", r.message.fg_warehouse);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t\tif (!frm.doc.from_warehouse) frm.set_value(\"from_warehouse\", r.message.wip_warehouse);\n// \t\t\t\t\t}\n//                     frm.cscript.get_items();\n// \t\t\t\t}\n// \t\t\t}\n// \t\t});\n// \t}\n\n});\n"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "modified": "2022-02-16 13:17:26.477860",
  "name": "Delivery Note-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Delivery Note', {\n\trefresh(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.barcode_validation);\n\t},\n\tonload(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.barcode_validation);\n\t},\n\tscan_barcode: function(frm){\n\t    let scan_barcode_field = frm.fields_dict[\"scan_barcode\"];\n\n\t\tlet show_description = function(idx, exist = null) {\n\t\t\tif (exist) {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Qty increased by 1', [idx]));\n\t\t\t} else {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Item added', [idx]));\n\t\t\t}\n\t\t};\n\n\t\tif(frm.doc.scan_barcode) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"erpnext.selling.page.point_of_sale.point_of_sale.search_serial_or_batch_or_barcode_number\",\n\t\t\t\targs: { search_value: frm.doc.scan_barcode }\n\t\t\t}).then(r => {\n\t\t\t\tconst data = r && r.message;\n\t\t\t\tif (!data || Object.keys(data).length === 0) {\n\t\t\t\t\tscan_barcode_field.set_new_description(__('Cannot find Item with this barcode'));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet cur_grid = frm.fields_dict.items.grid;\n\n\t\t\t\tlet row_to_modify = null;\n\t\t\t\tconst existing_item_row = frm.doc.items.find(d => d.item_code === data.item_code);\n\t\t\t\tconst blank_item_row = frm.doc.items.find(d => !d.item_code);\n\n\t\t\t\tif (existing_item_row) {\n\t\t\t\t\trow_to_modify = existing_item_row;\n\t\t\t\t} else if (blank_item_row) {\n\t\t\t\t\trow_to_modify = blank_item_row;\n\t\t\t\t}\n\t\t\t\tif (!row_to_modify) {\n\t\t\t\t\t// add new row\n\t\t\t\t\trow_to_modify = frappe.model.add_child(frm.doc, cur_grid.doctype, 'items');\n\t\t\t\t\tfrappe.msgprint({\n                    title: __('Alert'),\n                    indicator: 'orange',\n                    message: __('New Item is added')\n                    });\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t    if(data[\"batch_no\"]&& frappe.meta.has_field(row_to_modify.doctype, \"batch_no\")){\n\t\t\t\t        if(frm.doc.items.find(d => d.item_code === data.item_code))\n\t\t\t\t        {\n\t\t\t\t            if(!frm.doc.items.find(d => d.batch_no === data.batch_no)){\n    \t\t\t\t            row_to_modify = frappe.model.add_child(frm.doc, cur_grid.doctype, 'items');\n    \t\t\t\t        }\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\n\t\t\t\tshow_description(row_to_modify.idx, row_to_modify.item_code);\n\n\t\t\t\tfrm.from_barcode = true;\n\t\t\t\tfrappe.model.set_value(row_to_modify.doctype, row_to_modify.name, {\n\t\t\t\t\titem_code: data.item_code,\n\t\t\t\t\tchecking_qty: (frm.doc.barcode_validation)?(row_to_modify.checking_qty || 0) + 1 : row_to_modify.checking_qty,\n\t\t\t\t\tqty: (!frm.doc.barcode_validation)?(row_to_modify.qty || 0) + 1 : row_to_modify.qty\n\t\t\t\t});\n\n\t\t\t\t['serial_no', 'batch_no', 'barcode'].forEach(field => {\n\t\t\t\t\tif (data[field] && frappe.meta.has_field(row_to_modify.doctype, field)) {\n\n\t\t\t\t\t\tlet value = (row_to_modify[field] && field === \"serial_no\")\n\t\t\t\t\t\t\t? row_to_modify[field] + '\\n' + data[field] : data[field];\n\n\t\t\t\t\t\tfrappe.model.set_value(row_to_modify.doctype,\n\t\t\t\t\t\t\trow_to_modify.name, field, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tscan_barcode_field.set_value('');\n\t\t\t\trefresh_field(\"items\");\n\t\t\t});\n\t\t}\n\t},\n\tbarcode_validation: function(frm)\n\t{\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.barcode_validation);\n\t},\n\tbefore_submit: function(frm,cdt,cdn){\n\t\tconst item = locals[cdt][cdn];\n\t\tif(frm.doc.barcode_validation)\n\t\t{\n\t\t    frm.doc.items.forEach(function(d)\n            {\n    \t\t    if(d.qty !== d.checking_qty) \n    \t\t    {\n    \t\t        frappe.validated = false;\n                    frappe.msgprint({\n                    title: __('Warning'),\n                    indicator: 'red',\n                    message: __('Checking Qty and Required Qty of Items row {0} does not matched.',[d.idx])\n                    });\n    \t\t    }\n            });\n\t\t}\n\t},\n\tbefore_save(frm)\n\t{\n\t\tif(!frm.doc.barcode_validation)\n\t\t{\n    \t\tfrm.doc.items.forEach(function(d)\n                {\n                    frappe.model.set_value(d.doctype,d.name,'checking_qty',0);\n                }\n            );\n\t\t}\n\t}\n\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "modified": "2022-02-16 13:17:47.738530",
  "name": "Purchase Receipt-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\tif(frm.doc.docstatus===1) {\n\t\t\tfrm.add_custom_button(__(\"Barcode Printing\"), function() {\n            frappe.call({\n                method:'barcode_shrdc.barcode_shrdc.doctype.barcode_printing.barcode_printing.create_barcode_printing',\n                args:{ throw_if_missing: true, \n                    se_id: null,\n                    pr_id: frm.doc.name}\n                \n            })\n\t\t\t\t.then(r => {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t\tlet new_bp_doc = r.message;\t// new barcode printing request\n\t\t\t\t\t\tfrappe.set_route(\"Form\", new_bp_doc.doctype, new_bp_doc.name);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},  __(\"Create\"));\n\t\t\tfrm.page.set_inner_btn_group_as_primary(__('Create'));\n\n\t\t}\n\t}\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "modified": "2022-02-07 16:13:45.255786",
  "name": "Work Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Work Order', {\n\tsetup(frm) {\n\t\t// your code here\n\t\tfrm.trigger(\"production_item\")\n\t}\n})"
 }
]
